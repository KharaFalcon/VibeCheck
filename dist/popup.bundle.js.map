{"version":3,"file":"popup.bundle.js","mappings":";AACA","sources":["webpack://toneguard-extension/./src/popup.js"],"sourcesContent":["// popup.js\n/*\nThis js file analyzes the text and shows human-written advice\n*/\n\n// Database of keywords (TO EXPAND!!)\nconst emotionKeywords = {\n  angry: ['horrible', 'hate', 'angry', 'despicable', 'annoying'],\n  happy: ['happy', 'fun', 'excited', 'love'],\n  sad: ['sad', 'depressed', 'cry', 'alone', 'isolated'],\n};\n\n// This function categorises the tone of the highlighted text\n// by detecting the emotion of certain words - we use the emotionKeywords database here\n// to figure out the emotion\nfunction detectEmotion(text) {\n  // Converting the text to lowercase for easier looping and detecting\n  text = text.toLowerCase();\n\n  // Loop through each emotion (angry, sad, happy)\n  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\n    // Check if any keyword exists in the highlighted text\n    if (keywords.some((word) => text.includes(word))) {\n      return emotion;\n    }\n  }\n  // This is the default if no keywords match to any word in the highlighted text\n  return 'neutral';\n}\n\n// Mock database of human suggestions (NEED TO BE REPLACED BY Firebase!!)\nfunction humanRewrite(emotion) {\n  const suggestions = {\n    angry: [\n      \"Try: 'I feel frustrated because...'\",\n      \"Reword: 'Let's find a solution together.'\",\n    ],\n    sad: [\"It's okay to say: 'I've been feeling down about...'\"],\n  };\n  // Return the first suggestion for the detected emotion (or a default)\n  return suggestions[emotion]?.[0] || 'Sounds good to send!';\n}\n\n// When the \"Check Emotional Tone\" button is clicked:\ndocument.getElementById('checkText').addEventListener('click', () => {\n  // Get the currently active Gmail/Outlook/etc. tab\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    // Inject a script to get the selected text from the page\n    chrome.scripting.executeScript(\n      {\n        // Target the active tab\n        // tabs[0] refers to the first and only active tab\n        target: { tabId: tabs[0].id },\n\n        // Function to run in the tab\n        func: () => window.getSelection().toString().trim(),\n\n        // Analysis taking place\n      },\n      (results) => {\n        // Get the selected text\n        const text = results[0].result;\n\n        // Detect emotion (e.g., \"angry\")\n        const emotion = detectEmotion(text);\n\n        // Get human rewrite\n        const suggestion = humanRewrite(emotion);\n        // Display the suggestion in the popup\n        document.getElementById('suggestion').textContent = suggestion;\n      }\n    );\n  });\n});\n\n// --- NEW CODE FOR TOGGLE FUNCTIONALITY ---\n\nconst toggleSwitch = document.getElementById('toggle');\n\n// Function to load the saved state of the toggle\nasync function loadToggleState() {\n  try {\n    const response = await chrome.runtime.sendMessage({\n      action: 'getSetting',\n      key: 'vibeCheckEnabled',\n    });\n    if (response.success && response.value !== undefined) {\n      toggleSwitch.checked = response.value;\n      console.log('Loaded toggle state:', response.value); // Log for debugging\n    } else {\n      // Default to enabled if no setting found\n      toggleSwitch.checked = true;\n      console.log('No saved toggle state found, defaulting to enabled.'); // Log for debugging\n    }\n  } catch (error) {\n    console.error('Error loading toggle state:', error);\n    // Fallback to default in case of error\n    toggleSwitch.checked = true;\n  }\n}\n\n// Function to save the new state of the toggle\nasync function saveToggleState(isEnabled) {\n  try {\n    const response = await chrome.runtime.sendMessage({\n      action: 'saveSetting',\n      key: 'vibeCheckEnabled',\n      value: isEnabled,\n    });\n    if (response.success) {\n      console.log('Saved toggle state:', isEnabled); // Log for debugging\n    } else {\n      console.error('Error saving toggle state:', response.error);\n    }\n  } catch (error) {\n    console.error('Error saving toggle state (communication issue):', error);\n  }\n}\n\n// Add an event listener to the toggle switch\ntoggleSwitch.addEventListener('change', (event) => {\n  saveToggleState(event.target.checked);\n});\n\n// Load the state when the popup is opened\ndocument.addEventListener('DOMContentLoaded', loadToggleState);\n"],"names":[],"sourceRoot":""}