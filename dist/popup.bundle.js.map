{"version":3,"file":"popup.bundle.js","mappings":";AACA","sources":["webpack://toneguard-extension/./src/popup.js"],"sourcesContent":["// popup.js\n/*\nThis js file analyzes the text and shows human-written advice\n*/\n\n// Function to detect emotion (can be expanded to use fetched keywords)\nfunction detectEmotion(text, keywordsData) {\n  text = text.toLowerCase();\n  for (const entry of keywordsData) {\n    if (entry.keywords.some((word) => text.includes(word))) {\n      return entry.emotion;\n    }\n  }\n  return 'neutral';\n}\n\n// Function to get human rewrite from fetched data\nfunction getRewriteSuggestion(emotion, suggestionsData) {\n  const suggestionEntry = suggestionsData.find((s) => s.emotion === emotion);\n  return suggestionEntry ? suggestionEntry.suggestion : 'Sounds good to send!';\n}\n\n// When the \"Check Emotional Tone\" button is clicked:\ndocument.getElementById('checkText').addEventListener('click', () => {\n  // Get the currently active Gmail/Outlook/etc. tab\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    // Inject a script to get the selected text from the page\n    chrome.scripting.executeScript(\n      {\n        // Target the active tab\n        target: { tabId: tabs[0].id },\n        func: () => window.getSelection().toString().trim(),\n      },\n      (results) => {\n        const selectedText = results[0].result;\n\n        if (selectedText) {\n          // Request rewrite suggestions from the background script\n          chrome.runtime.sendMessage(\n            { action: 'getRewriteSuggestions' },\n            (response) => {\n              if (response.success) {\n                const suggestionsData = response.data;\n                // Assuming your Firebase data has 'emotion' and 'suggestion' fields\n                const emotion = detectEmotion(selectedText, suggestionsData); // Pass suggestionsData to detectEmotion\n                const suggestion = getRewriteSuggestion(\n                  emotion,\n                  suggestionsData\n                );\n                document.getElementById('suggestion').textContent = suggestion;\n              } else {\n                console.error(\n                  'Failed to fetch rewrite suggestions:',\n                  response.error\n                );\n                document.getElementById('suggestion').textContent =\n                  'Error fetching suggestions.';\n              }\n            }\n          );\n        } else {\n          document.getElementById('suggestion').textContent =\n            'Please select some text to check.';\n        }\n      }\n    );\n  });\n});\n\n// --- NEW CODE FOR TOGGLE FUNCTIONALITY (Keep as is) ---\n\nconst toggleSwitch = document.getElementById('toggle');\n\nasync function loadToggleState() {\n  try {\n    const response = await chrome.runtime.sendMessage({\n      action: 'getSetting',\n      key: 'vibeCheckEnabled',\n    });\n    if (response.success && response.value !== undefined) {\n      toggleSwitch.checked = response.value;\n      console.log('Loaded toggle state:', response.value);\n    } else {\n      toggleSwitch.checked = true;\n      console.log('No saved toggle state found, defaulting to enabled.');\n    }\n  } catch (error) {\n    console.error('Error loading toggle state:', error);\n    toggleSwitch.checked = true;\n  }\n}\n\nasync function saveToggleState(isEnabled) {\n  try {\n    const response = await chrome.runtime.sendMessage({\n      action: 'saveSetting',\n      key: 'vibeCheckEnabled',\n      value: isEnabled,\n    });\n    if (response.success) {\n      console.log('Saved toggle state:', isEnabled);\n    } else {\n      console.error('Error saving toggle state:', response.error);\n    }\n  } catch (error) {\n    console.error('Error saving toggle state (communication issue):', error);\n  }\n}\n\ntoggleSwitch.addEventListener('change', (event) => {\n  saveToggleState(event.target.checked);\n});\n\ndocument.addEventListener('DOMContentLoaded', loadToggleState);\n"],"names":[],"sourceRoot":""}